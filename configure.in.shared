AC_INIT(src/main.c)
AM_INIT_AUTOMAKE(mpfc, 1.3.3)
AC_PROG_CC
AC_PROG_LIBTOOL
CFLAGS="-O0 -g"
AC_SUBST(CFLAGS)

AM_CONFIG_HEADER(config.h)
AM_GNU_GETTEXT

# Check for ncurses
LIBS_save=$LIBS
AC_CHECK_HEADERS([curses.h],,[AC_MSG_ERROR(*** Can't find curses.h ***)])
AC_CHECK_LIB(ncurses, initscr,,[AC_MSG_ERROR(*** Can't find ncurses library ***)])
CURSES_LIBS="-lncurses"
AC_SUBST(CURSES_LIBS)
LIBS=$LIBS_save

# Check for pthread
LIBS_save=$LIBS
AC_CHECK_HEADERS([pthread.h],,[AC_MSG_ERROR(*** Can't find pthread.h ***)])
AC_CHECK_LIB(pthread, pthread_create,,[AC_MSG_ERROR(*** Can't find posix threads library ***)])
PTHREAD_LIBS="-lpthread"
AC_SUBST(PTHREAD_LIBS)
LIBS=$LIBS_save

# Check for libdl
LIBS_save=$LIBS
AC_CHECK_HEADERS([dlfcn.h],,[AC_MSG_ERROR(*** Can't find dlfcn.h ***)])
AC_CHECK_LIB(dl, dlopen,,[AC_MSG_ERROR(*** Can't find libdl ***)])
DL_LIBS="-ldl"
AC_SUBST(DL_LIBS)
LIBS=$LIBS_save

# Check for gpm library
AC_ARG_ENABLE(gpm, 
[	--disable-gpm		Disable gpm support [default=enabled]],,
		enable_gpm="yes")
if test "x$enable_gpm" = xyes; then
	LIBS_save=$LIBS
	AC_CHECK_HEADERS([gpm.h],,[AC_MSG_ERROR(*** Can't find gpm.h ***)])
	AC_CHECK_LIB(gpm, Gpm_Open,,[AC_MSG_ERROR(*** Can't find gpm library ***)])
	GPM_LIBS="-lgpm"
	AC_SUBST(GPM_LIBS)
	LIBS=$LIBS_save
else
	AC_MSG_RESULT([*** gpm support disabled per user request ***])
fi

# Check for soundcard header 
AC_CHECK_HEADERS([sys/soundcard.h],, [AC_MSG_ERROR(*** Can't find sys/soundcard.h ***)])

# Check for resolver library
LIBS_save=$LIBS
AC_CHECK_HEADERS([netdb.h],,[AC_MSG_ERROR(*** Can't find libresolv header ***)])
AC_CHECK_LIB(resolv, gethostbyname,,[AC_MSG_ERROR(*** Can't find libresolv ***)])
RESOLV_LIBS="-lresolv"
AC_SUBST(RESOLV_LIBS)
LIBS=$LIBS_save

# Stuff for mp3 plugin
AC_ARG_ENABLE(mp3, 
[	--disable-mp3		Disable mp3 input plugin [default=enabled]],,
		enable_mp3="yes")
if test "x$enable_mp3" = xyes; then
	# Check for math lib
	LIBS_save=$LIBS
	AC_CHECK_HEADERS([math.h],,[AC_MSG_ERROR(*** Can't find math header ***)])
	AC_CHECK_LIB(m, pow,,[AC_MSG_ERROR(*** Can't find libm ***)])
	MATH_LIBS="-lm"
	AC_SUBST(MATH_LIBS)
	LIBS=$LIBS_save

	# Check for libmad
	LIBS_save=$LIBS
	AC_CHECK_HEADERS([mad.h],,[AC_MSG_ERROR(*** Can't find libmad header ***)])
	AC_CHECK_LIB(m, pow,,[AC_MSG_ERROR(*** Can't find libmad ***)])
	MAD_LIBS="-lmad"
	AC_SUBST(MAD_LIBS)
	LIBS=$LIBS_save
else
	AC_MSG_RESULT([*** mp3 plugin disabled per user request ***])
fi

# Stuff for radio plugin
AC_ARG_ENABLE(radio, 
[	--disable-radio		Disable radio input plugin [default=enabled]],,
		enable_radio="yes")
if test "x$enable_radio" = xyes; then
	# Check for video4linux includes
	AC_CHECK_HEADERS([linux/videodev.h],, [AC_MSG_ERROR(*** Can't find linux/videodev.h ***)])
else
	AC_MSG_RESULT([*** radio plugin disabled per user request ***])
fi

# Stuff for audiocd plugin
AC_ARG_ENABLE(audiocd, 
[	--disable-audiocd	Disable audiocd input plugin [default=enabled]],,
		enable_audiocd="yes")
if test "x$enable_audiocd" = xyes; then
	# Check for cdrom includes
	AC_CHECK_HEADERS([linux/cdrom.h],, [AC_MSG_ERROR(*** Can't find linux/cdrom.h ***)])
else
	AC_MSG_RESULT([*** audiocd plugin disabled per user request ***])
fi

# Stuff for ogg plugin
AC_ARG_ENABLE(ogg, 
[	--disable-ogg		Disable ogg input plugin [default=enabled]],,
		enable_ogg="yes")
if test "x$enable_ogg" = xyes; then
	# Check for libvorbis
	LIBS_save=$LIBS
	AC_CHECK_LIB(vorbis, vorbis_dsp_clear,,[AC_MSG_ERROR(*** Can't find libvorbis ***)])
	AC_CHECK_LIB(vorbisfile, ov_open,,[AC_MSG_ERROR(*** Can't find libvorbisfile ***)])
	AC_CHECK_LIB(ogg, ogg_stream_init,,[AC_MSG_ERROR(*** Can't find libogg ***)])
	AC_CHECK_HEADERS([vorbis/codec.h vorbis/vorbisfile.h ogg/ogg.h],,
					 [AC_MSG_ERROR(*** Can't find ogg headers ***)])
	OGG_LIBS="-lvorbis -lvorbisfile -logg"
	AC_SUBST(OGG_LIBS)
	LIBS=$LIBS_save
else
	AC_MSG_RESULT([*** ogg plugin disabled per user request ***])
fi

# Stuff for alsa plugin
AC_ARG_ENABLE(alsa, 
[	--disable-alsa		Disable alsa input plugin [default=enabled]],,
		enable_alsa="yes")
if test "x$enable_alsa" = xyes; then
	# Check for asound lib
	LIBS_save=$LIBS
	AC_CHECK_HEADERS([alsa/asoundlib.h],, [AC_MSG_ERROR(*** Can't find alsa/asoundlib.h ***)])
	AC_CHECK_LIB(asound, snd_pcm_open,,[AC_MSG_ERROR(*** Can't find libasound ***)])
	ASOUND_LIBS="-lasound"
	AC_SUBST(ASOUND_LIBS)
	LIBS=$LIBS_save
else
	AC_MSG_RESULT([*** alsa plugin disabled per user request ***])
fi

# Stuff for esd plugin
AC_ARG_ENABLE(esd, 
[	--enable-esd		Enable esd input plugin [default=disabled]],,
		enable_esd="no")
if test "x$enable_esd" = xyes; then
	# Check for esound lib
	LIBS_save=$LIBS
	AC_CHECK_HEADERS([esd.h],, [AC_MSG_ERROR(*** Can't find esd.h ***)])
	AC_CHECK_LIB(esd, esd_play_stream,,[AC_MSG_ERROR(*** Can't find libesd ***)])
	ESD_LIBS=`esd-config --libs`
	ESD_CFLAGS=`esd-config --cflags`
	AC_SUBST(ESD_LIBS)
	AC_SUBST(ESD_CFLAGS)
	LIBS=$LIBS_save
fi

# Set enabling stuff for other plugins
AC_ARG_ENABLE(radio, 
[	--disable-radio		Disable radio input plugin [default=enabled]],,
		enable_radio="yes")
AC_ARG_ENABLE(recorder, 
[	--disable-recorder	Disable recorder input plugin [default=enabled]],,
		enable_recorder="yes")
AC_ARG_ENABLE(timidi, 
[	--disable-timidi	Disable timidi input plugin [default=enabled]],,
		enable_timidi="yes")
AC_ARG_ENABLE(wav, 
[	--disable-wav		Disable wav input plugin [default=enabled]],,
		enable_wav="yes")
AC_ARG_ENABLE(disk_writer, 
[	--disable-disk_writer	Disable disk_writer output plugin 
 	[default=enabled]],, enable_disk_writer="yes")
AC_ARG_ENABLE(oss, 
[	--disable-oss		Disable oss output plugin [default=enabled]],,
		enable_oss="yes")
AC_ARG_ENABLE(effect-echo, 
[	--disable-effect-echo	Disable echo effect plugin [default=enabled]],,
		enable_effect_echo="yes")
AC_ARG_ENABLE(charset-ru, 
[	--disable-charset-ru	Disable russian charset plugin [default=enabled]],,
		enable_charset_ru="yes")

# Choose input plugins
for plugin in audiocd mp3 ogg radio recorder timidi wav; do
	name="\$enable_$plugin"
	value=`eval echo $name`
	if test "x${value}" = xyes; then
		INPUT_PLUGINS="$INPUT_PLUGINS $plugin"
	fi
done

# Choose output plugins
for plugin in alsa disk_writer esd oss; do
	name="\$enable_$plugin"
	value=`eval echo $name`
	if test "x${value}" = xyes; then
		OUTPUT_PLUGINS="$OUTPUT_PLUGINS $plugin"
	fi
done

# Choose effect plugins
for plugin in echo; do
	name="\$enable_effect_$plugin"
	value=`eval echo $name`
	if test "x${value}" = xyes; then
		EFFECT_PLUGINS="$EFFECT_PLUGINS $plugin"
	fi
done

# Choose charset plugins
for plugin in ru; do
	name="\$enable_charset_$plugin"
	value=`eval echo $name`
	if test "x${value}" = xyes; then
		CHARSET_PLUGINS="$CHARSET_PLUGINS $plugin"
	fi
done

AC_SUBST(CHARSET_PLUGINS)
AC_SUBST(EFFECT_PLUGINS)
AC_SUBST(INPUT_PLUGINS)
AC_SUBST(OUTPUT_PLUGINS)

AC_OUTPUT(Makefile src/Makefile libmpfc/Makefile libmpfcwnd/Makefile
		    intl/Makefile po/Makefile.in m4/Makefile po/Makefile \
			plugins/Makefile plugins/input/Makefile plugins/output/Makefile \
			plugins/input/mp3/Makefile plugins/input/wav/Makefile \
			plugins/output/oss/Makefile plugins/effect/Makefile \
			plugins/effect/echo/Makefile plugins/input/audiocd/Makefile \
			plugins/input/radio/Makefile plugins/output/disk_writer/Makefile \
			plugins/input/ogg/Makefile plugins/input/timidi/Makefile \
			plugins/charset/Makefile plugins/charset/ru/Makefile \
			plugins/input/recorder/Makefile plugins/output/alsa/Makefile \
			plugins/output/esd/Makefile \
			doc/Makefile)

# Configure rcfiles
./build_rcfile.pl "$OUTPUT_PLUGINS" "local" > src/.mpfcrc
./build_rcfile.pl "$OUTPUT_PLUGINS" "global" > mpfcrc
